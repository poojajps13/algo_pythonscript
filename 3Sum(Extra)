class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def threeSumClosest(self, A, B):
        size_of_A = len(A)      
        if size_of_A < 3:       #if the size of array is less than 3, triplet cannot be formed
            return "error"
        A.sort()      
        min_diff = sys.maxsize      
        for index_ele1 in range(0,size_of_A-2,1):
            index_ele2 = index_ele1 + 1
            index_ele3 = size_of_A - 1
            while index_ele2 < index_ele3:      #loop executes untill index2 is less than index3
                curr_sum = A[index_ele1] + A[index_ele2] + A[index_ele3]        #finds sum of triplet
                if(abs(B - curr_sum) < min_diff):       #checks whether current triplet sum is closer to expected sum
                    ans_sum = curr_sum
                    min_diff = abs(B-curr_sum)
                if curr_sum > B:                #if sum is more than expected sum than decrement index3
                    index_ele3 = index_ele3 - 1
                else:                           #if sum is less than expected sum than increment index2
                    index_ele2 = index_ele2 + 1
        return ans_sum
        
        
